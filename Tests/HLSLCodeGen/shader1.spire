using "StandardPipeline.spire";
using "Utils.spire";

struct ArrInStruct
{
	vec3 ttt;
	vec3[4] points;
}

int Test(out ArrInStruct testOut)
{
	for (int i = 0; i < 4; i++)
		testOut.points[i] = vec3(0);
	return 0;
}


module DeferredLightingParams
{
	param Texture2D albedoTex;
	param Texture2D pbrTex;
	param Texture2D normalTex;
	param Texture2D depthTex;
	param SamplerState nearestSampler;
}

module SubModuleWithParam
{
	param Texture2D albedoTex;
	param SamplerState samplerState;
	vec4 Eval(vec2 uv)
	{
		return albedoTex.Sample(samplerState, uv);
	}
}

module SubModuleWithParam1
{
	param Texture2D albedoTex;
	param SamplerState samplerState;
	vec4 Eval(vec2 uv)
	{
		return albedoTex.Sample(samplerState, uv);
	}
}

module TopModule
{
	using l0 = SubModuleWithParam();
	using l1 = SubModuleWithParam();
	using l2 = SubModuleWithParam1();
	vec4 shadingResult = l0.Eval(vec2(0.0)) + l1.Eval(vec2(0.0)) + l2.Eval(vec2(0.0));
}

shader DeferredLighting targets StandardPipeline
{
    [Binding: "0"]
	public using DeferredLightingParams;

	[Binding: "1"]
	public using ForwardBasePassParams;

	public @MeshVertex vec2 vertPos;
	public @MeshVertex vec2 vertUV;

	public vec4 projCoord = vec4(vertPos.xy, 0.0, 1.0);

	public vec4 normalSample = normalTex.Sample(nearestSampler, vertUV);
	public vec3 normal = normalSample.xyz * 2.0 - 1.0;
	public vec4 pbr = pbrTex.Sample(nearestSampler, vertUV);
	public float roughness = pbr.x;
	public float metallic = pbr.y;
	public float specular = pbr.z;
	public float ao = pbr.w;
	public vec3 albedo = albedoTex.Sample(nearestSampler, vertUV).xyz;
	public float selfShadow(vec3 x) { return 1.0; }
	public bool isDoubleSided = normalSample.w != 0.0;
    vec3 lightParam = vec3(roughness, metallic, specular);
	float z = depthTex.Sample(nearestSampler, vertUV).r;
    float x = vertUV.x*2-1;
    float y = vertUV.y*2-1;
	vec4 position = invViewProjTransform * vec4(x, y, z, 1.0f);
	vec3 pos = position.xyz / position.w;
	
	[Binding: "2"]
	using lighting = Lighting();

	[Binding: "3"]
	using layers = TopModule();

    public out @Fragment vec4 outputColor = vec4(lighting.result, 1.0) + layers.shadingResult;
}


/*
template shader ForwardBase(passParams : ForwardBasePassParams, 
                            lightingModule, 
                            geometryModule : IMaterialGeometry, 
                            materialModule : IMaterialPattern, 
                            animationModule) targets StandardPipeline
{
    public using VertexAttributes;
    public using passParams;
    public using animationModule;
    public using TangentSpaceTransform;
    public using geometryModule;
    public using VertexTransform;
    public using materialModule;
    vec3 lightParam = vec3(roughness, metallic, specular);
    using lighting = lightingModule(TangentSpaceToWorldSpace(vec3(normal.x, -normal.y, normal.z)));
    public out @Fragment vec4 outputColor
    {
		ArrInStruct t;
		int r = Test(t);
        if (opacity < 0.01f) discard;
        return vec4(lighting.result, opacity + (float)r);
    }
    
}

*/