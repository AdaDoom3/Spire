// shaders.spire

// TODO(tfoley): strip this down to a minimal pipeline

pipeline StandardPipeline
{
    [Pinned]
    input world MeshVertex;
    
    [Pinned]
    input world ModelInstance;
    
    [Pinned]
    
    input world ViewUniform;
    
    [Pinned]
    input world MaterialUniform;
    
    world CoarseVertex;// : "glsl(vertex:projCoord)" using projCoord export standardExport;
    world Fragment;// : "glsl" export fragmentExport;
    
    require @CoarseVertex vec4 projCoord; 
    
    [Binding: "2"]
    extern @(CoarseVertex*, Fragment*) Uniform<MaterialUniform> MaterialUniformBlock; 
    import(MaterialUniform->CoarseVertex) uniformImport()
    {
        return project(MaterialUniformBlock);
    }
    import(MaterialUniform->Fragment) uniformImport()
    {
        return project(MaterialUniformBlock);
    }

    [Binding: "1"]
    extern @(CoarseVertex*, Fragment*) Uniform<ViewUniform> ViewUniformBlock;
    import(ViewUniform->CoarseVertex) uniformImport()
    {
        return project(ViewUniformBlock);
    }
    import(ViewUniform->Fragment) uniformImport()
    {
        return project(ViewUniformBlock);
    }
    
    [Binding: "0"]
    extern @(CoarseVertex*, Fragment*) Uniform<ModelInstance> ModelInstanceBlock;
    import(ModelInstance->CoarseVertex) uniformImport()
    {
        return project(ModelInstanceBlock);
    }
    import(ModelInstance->Fragment) uniformImport()
    {
        return project(ModelInstanceBlock);
    }
    
    [VertexInput]
    extern @CoarseVertex MeshVertex vertAttribIn;
    import(MeshVertex->CoarseVertex) vertexImport()
    {
        return project(vertAttribIn);
    }
    
    extern @Fragment CoarseVertex CoarseVertexIn;
    import(CoarseVertex->Fragment) standardImport()
// TODO(tfoley): this trait doesn't seem to be implemented on `vec3`
//        require trait IsTriviallyPassable(CoarseVertex)
    {
        return project(CoarseVertexIn);
    }
    
    stage vs : VertexShader
    {
        World: CoarseVertex;
        Position: projCoord;
    }
    
    stage fs : FragmentShader
    {
        World: Fragment;
    }
}

shader HelloModule : StandardPipeline
{
    @MeshVertex vec3 position;
    @MeshVertex vec3 color;

    @ModelInstance mat4 modelViewProjection;

    public vec4 projCoord = modelViewProjection * vec4(position, 1.0);

    out @Fragment vec4 colorTarget = vec4(color,1);
}
